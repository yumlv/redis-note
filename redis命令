
# 字符串

 字符串可以存储以下3种类型的值:  1、字符串 2、整数 3、浮点数
 
 redis中的自增命令和自减命令
         INCR  INCR key-name    ----> 将键存储的值加上1
         DECR  DECR key-name    ----> 将键存储的值减少1
         INCRBY  INCRBY key-name amount  ---> 将键存储的值加上整数amount
         DECRBY DECRBY key-name amount   ---> 将键存储的值减去整数amount
         
         INCRBYFLOAT  INCRBYFLOAT key-name amount  --->将键存储的值加上浮点数amount, 这个命令在Redis2.6或以上版本可用。
         
 当用户将一个值存储到redis字符串里面的时候，如果这个值可以被解释为十进制整数或浮点数，那么redis会察觉到这一点，并允许用户对这个字符串执行各种INCR* 和 DECR*
    操作。如果用户对一个不存在的键或者一个保存了空串的键执行自增或者自减操作，那么redis在执行操作时会将这个键的值当作0来处理，如果用户尝试对一个值无法被解释为整数
    或者浮点数的字符串键执行自增或自减操作，那么redis将向用户返回一个错误。
            


供redis处理子串和二进制位的命令
   
   APPEND     APPEND key-name value  ---> 将值value追加到给定键key-name当前存储的值的末尾。
   GETRANGE   GETRANGE key-name start end   ---> 获取一个由偏移量start至偏移量end范围内所有字符组成的子串，包括start 和 end 在内。
   SETRANGE   SETRANGE  key-name offset value  ---> 将从start偏移量开始的子串设置为给定值。把其范围内的值覆盖。
   GETBIT     GETBIT key-name offset   ---> 将字符串看作是二进制位串(bit string), 并返回位串中偏移量为offset的二进制位的值。
   SETBIT     SETBIT key-name offset value ---> 将字符串看作是二进制位串，并将位串中偏移量为offset的二进制位的值设置为value。
   BITCOUNT   BITCOUNT key-name [start end]  ---> 统计二进制位串里面值为1的二进制位的数量，如果给定了可选的start偏移量和end偏移量，那么只对偏移量指定范围内的
       二进制位进行统计。
   
   
   GETRANGE  和  SUBSTR  
    redis现在的GETRANGE 命令是由以前的SUBSTR命令改名而来的。
    在使用SETRANGE 或 SETBIT 命令对字符串进行写入的时候，如果字符串当前的长度不能满足写入的要求，那么redis会自动地使用空字节(null)来将字符串扩展至所需的长度，
      然后才执行写入或者更新操作。在使用GETRANGE读取字符串的时候，超出字符串末尾的二进制位会被视为是空串。
    
  
  redis的索引以0为开始，在进行范围访问时，范围的终点endpoint 默认也包含在这个范围之内。
  
  
  
  #####-----------------------分割线----------------------------###################----------------------分割线-------------#####
  
  #列表
  redis的列表允许用户从序列的两端推入或弹出元素；列表可以用来存储任务信息、最近浏览过的文章、常用联系人信息。
  
  一些常用的列表命令:
     
     RPUSH   RPUSH  key-name  value [value ... ]   -----> 将一个或多个值推入列表的右端。
     LPUSH   LPUSH  key-name  value [value ... ]   -----> 将一个或多个值推入列表的左端。
     RPOP    RPOP   key-name                       -----> 移除并返回列表最右端的元素。
     LPOP    LPOP   key-name                       -----> 移除并返回列表最左端的元素。
     LINDEX  LINDEX  key-name   offset             -----> 返回列表中偏移量为offset的元素。
     LRANGE  LRANGE key-name start end             -----> 返回列表从start偏移量到end偏移量范围内的 所有 元素，
       其中偏移量为srtart和偏移量为end的元素也会包含在被返回的元素之内。
     LTRIM   LTRIM key-name start end              -----> 对列表进行修剪，只保留从start 偏移量到end偏移量范围内的元素，其中偏移量为start和偏移量为end
                                                            的元素也会被保留。
    
     可以从列表的左端、右端或者左右两端删减任意数量的元素。
     
     
     阻塞式的列表弹出命令以及在列表之间移动元素的命令
     
     BLPOP   BLPOP  key-name  timeout    ---->  从第一个非空列表中弹出位于最左端的元素，或者在timeout秒之内阻塞并等待可弹出的元素出现。
     BRPOP   BRPOP  key-name  timeout    ---->  从第一个非空列表中弹出位于最右端的元素，或者在timeout秒之内阻塞并等待可弹出的元素出现。
     RPOPLPUSH      RPOPLPUSH  source-key  dest-key  -----> 从source-key 列表中弹出位于最右端的元素，然后将这个元素推入dest-key列表的最左端，
                                                             并向用户返回这个元素。
     BRPOPLPUSH   BRPOPLPUSH   source-key  dest-key  timeout  -----> 从source-key 列表中弹出位于最右端的元素，然后将这个元素推入dest-key列表的
                     最左端，并向用户返回这个元素；如果source-key为空，那么在timeout秒之内阻塞并等待可弹出的元素出现。
                     
                
    在redis里面，多个命令原子地执行指的是，在这些命令正在读取或者修改数据的时候，其他客户端不能读取或修改相同的数据。
    
    对于阻塞弹出命令和弹出并推入命令，最常见的用例就是消息传递(messaging) 和 任务队列（task queue）。
    
    
     
     
     
       #####-----------------------分割线----------------------------###################----------------------分割线-------------#####



  #集合
  
  redis的集合以无序的方式来存储多个各不相同的元素，用户可以快速地对集合执行添加元素操作、移除元素操作以及检查一个元素是否存在于集合里。
  
  一些常用的集合命令
  
   SADD       SADD  key-name item   -----> 将一个或多个元素添加到集合里面，并返回被添加元素当中原本并不存在与集合里面的元素数量。（ redis的集合以无序的方式来存储多个各不相同的元素 ）
   SREM       SREM  key-name item   -----> 从集合里面移除一个或多个元素，并返回被移除元素的数量。
   SISMEMBER    SISMEMBER   key-name item  -----> 检查元素item是否存在于集合key-name里。
   SCARD      SCARD  key-name       -----> 返回集合包含的元素的数量。
   SMEMBERS   SMEMBERS key-name     -----> 返回集合包含的所有元素。
   SRANDMEMBER   SRANDMEMBER key-name  [count]  -----> 从集合里面随机地返回一个或多个元素。当count 为正数时，命令返回的随机元素不会重复； 
                                                         当count 为负数时，命令返回的随机元素可能会出现重复。
   SPOP    SPOP  key-name           -----> 随机地移除集合中的一个元素，并返回被移除的元素。
   SMOVE   SMOVE source-key  dest-key  item     ----->  如果集合source-key 包含元素item, 那么从集合source-key 里面移除元素item,并将元素
                                                          item添加到集合dest-key中；如果item被成功移除，那么命令返回1，否则返回0。
          
                                                        
  
   
  
  
         #####-----------------------分割线----------------------------###################----------------------分割线-------------#####



  #散列  hash
  
   如何将数据存储到散列里面，以及这样做的好处是什么?
   
   用于添加和删除键值对的散列操作:
     HMGET    HMGET  key-name key            -----> 从散列里面获取一个或多个键的值。
     HMSET    HMSET  key-name key  value     -----> 为散列里面的一个或多个键设置值。
     HDEL     HDEL   key-name key            -----> 删除散列里面的一个或多个键值对，返回成功找到并删除的键值对数量。
     HLEN     HLEN   key-name                -----> 返回散列包含的键值对数量。
     
  
  
  
